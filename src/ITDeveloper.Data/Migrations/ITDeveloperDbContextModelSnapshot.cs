// <auto-generated />
using System;
using ITDeveloper.Data.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITDeveloper.Data.Migrations
{
    [DbContext(typeof(ITDeveloperDbContext))]
    partial class ITDeveloperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("ITDeveloper.Domain.Entitites.Mural", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notification")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Tittle")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Murals");
                });

            modelBuilder.Entity("ITDeveloper.Domain.Entitites.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("Cpf")
                        .HasColumnType("varchar(11)")
                        .IsFixedLength(true)
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HospitalizationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Rg")
                        .HasColumnName("RG")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("RgEmitterOrgan")
                        .HasColumnName("RgEmitterOrgan")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("TBL_PATIENT");
                });

            modelBuilder.Entity("ITDeveloper.Domain.Entitites.PatientState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TBL_PATIENT_STATE");
                });

            modelBuilder.Entity("ITDeveloper.Domain.Entitites.Patient", b =>
                {
                    b.HasOne("ITDeveloper.Domain.Entitites.PatientState", "State")
                        .WithMany("Patients")
                        .HasForeignKey("StateId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
